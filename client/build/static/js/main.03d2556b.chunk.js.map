{"version":3,"sources":["Landing.js","filterForm.js","store/actions/cityActions.js","FilterPlantas.js","store/actions/itineraryActions.js","homeLink.js","botonNewPlanta.js","Plantas.js","Login.js","store/actions/usersAction.js","CreateAccount.js","contador.js","botonNewDatos.js","IoTDatas.js","CargarDatos.js","NuevaPlanta.js","notfound.js","App.js","serviceWorker.js","store/reducers/citiesReducer.js","store/reducers/FilterFormReducer.js","store/reducers/itineraryReducer.js","store/reducers/usersReducer.js","store/reducers/registerReducer.js","store/reducers/datosReducer.js","store/reducers/plantaReducer.js","store/reducers/rootReducer.js","index.js"],"names":["Logo","props","src","source","alt","className","Browser","to","FindTrip","name","LogIn","CreateNewAccount","BuildMytineray","Home","Landing","FilterForm","handleChange","e","filtrarUsuarios","target","value","onChange","htmlFor","type","id","this","cityFilter","Component","connect","state","dispatch","payload","FilterPlantas","fetchCities","fetch","then","response","json","result","listarCiudades","catch","console","log","filterCities","filtrarCiudades","handleClick","clickearCiudad","logged","Fragment","filteredCities","match","ListGroup","map","city","Item","key","_id","planta","onClick","React","citiesList","cities","isFetching","url","itineraries","user","HomeLink","CreateNewPlanta","Plantas","Login","event","axios","post","params","res","data","login","alert","preventDefault","ingresarEmail","ingresarPassword","token","placeholder","email","handleEmailChange","bind","password","handlePasswordChange","Container","Row","Col","md","span","offset","handleSubmit","CreateAccount","crearEmail","crearPassword","crearPicture","onSubmit","picture","handlePictureChange","Contador","time","seconds","timer","startTimer","countDown","secs","divisor_for_minutes","divisor_for_seconds","Math","floor","ceil","timeLeftVar","secondsToTime","setState","setInterval","clearInterval","m","s","CreateNewDatos","IoTDatas","fetchItineraries","listarItinerarios","itinerary","temperatura","humedad","luz","filtrarItinerarios","cityName","CargarDatos","put","crearPlanta","crearTemperatura","crearHumedad","crearLuz","handlePlantaChange","Temperatura","handleTemperaturaChange","Humedad","handleHumedadChange","Luz","handleLuzChange","datos","idPlanta","id_dueño","NuevaPlanta","crearDueño","dueño","handleDueñoChange","Notfound","App","basename","exact","path","component","Boolean","window","location","hostname","initialState","FilterCitiesReducer","action","filter","toLowerCase","indexOf","FilterFormReducer","ItinerariesReducer","usersReducer","registerReducer","datosReducer","plantaReducer","rootReducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.03d2556b.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\n\r\nfunction Logo(props) {\r\n    return <img src = { props.source }\r\n    alt = { props.alt }\r\n    className = \"App-logo my-4\" /\r\n        >\r\n    ;\r\n}\r\n\r\nfunction Browser(props) {\r\n    return <\r\n        Link to = \"/Plantas\" > < img src = { props.src }\r\n    alt = { props.alt }\r\n    className = \"App-browser mb-4\" /\r\n        >\r\n        <\r\n        /Link>\r\n\r\n}\r\n\r\nfunction FindTrip(props) {\r\n    return <\r\n        div > <\r\n        h4 className = \"mt-4\" > Ver plantas < /h4> <\r\n    Browser src = { props.source }\r\n    alt = { props.name }\r\n    / > < /\r\n    div >\r\n}\r\n\r\n\r\nfunction LogIn(props) {\r\n    return <Link to = \"./Login\"\r\n    className = \"App-link\" > Log in < /Link>\r\n}\r\n\r\nfunction CreateNewAccount(props) {\r\n    return <Link to = \"./CreateAccount\"\r\n    className = \"App-link\" > Create Account < /Link>\r\n}\r\n\r\nfunction BuildMytineray(props) {\r\n    return <div >\r\n        <\r\n        h6 > Ingresa para agregar o quitar plantas < /h6> <\r\n    LogIn / > <\r\n        CreateNewAccount / > < /\r\n    div >\r\n}\r\n\r\nfunction Home(props) {\r\n    return <Link to = \"/\" > < img src = { props.source }\r\n    alt = { props.alt }\r\n    className = \"App-home my-5\" /\r\n        >\r\n        <\r\n        /Link >\r\n}\r\n\r\nfunction Landing() {\r\n    return <div >\r\n\r\n        <\r\n        h3 > Controla el estado de tus plantas online < /h3>\r\n\r\n    <\r\n    Logo source = \"./logo.jpg\"\r\n    alt = \"Logo\" / >\r\n\r\n        <\r\n        FindTrip source = \"./circled-right-2.png\"\r\n    name = \"Browser\" /\r\n        >\r\n        <\r\n        BuildMytineray / >\r\n        <\r\n        Home source = \"./homeIcon.png\"\r\n    alt = \"Home\" / >\r\n        <\r\n        /div>\r\n}\r\n\r\nexport default Landing;","import React, { Component } from 'react'\r\nimport { connect } from \"react-redux\";\r\nimport { HANDLE_CHANGE } from \"./store/actions/cityActions\";\r\n\r\nclass FilterForm extends Component {\r\n\r\n\r\n    handleChange = (e) => {\r\n        this.props.filtrarUsuarios(e.target.value)\r\n        this.props.onChange(e.target.value)\r\n    }\r\n\r\n    render() {\r\n        return ( <\r\n            div >\r\n            <\r\n            label htmlFor = \"filter\" > Filtrar: < /label> <\r\n            input type = \"text\"\r\n            id = \"filter\"\r\n            value = { this.props.cityFilter }\r\n            onChange = { this.handleChange }\r\n            /> < /\r\n            div >\r\n        )\r\n    }\r\n}\r\n\r\nconst mapDispactchToProps = (dispatch) => {\r\n    return {\r\n        filtrarUsuarios: (value) => {\r\n            dispatch({ type: HANDLE_CHANGE, payload: value })\r\n        }\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        cityFilter: state.cityFilter.cityFilter\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispactchToProps)(FilterForm)","export const LISTAR_CIUDADES = 'LISTAR_CIUDADES';\r\nexport const FILTER_CITIES = 'FILTER_CITIES';\r\nexport const HANDLE_CHANGE = 'HANDLE_CHANGE';\r\nexport const POST_PLANTA = 'POST_PLANTA';\r\nexport const POST_TEMPERATURA = 'POST_TEMPERATURA';\r\nexport const POST_HUMEDAD = 'POST_HUMEDAD';\r\nexport const POST_LUZ = 'POST_LUZ';\r\nexport const POST_DUEÑO = \"POST_DUEÑO\";\r\nexport const POST_IDDUEÑO = \"POST_IDDUEÑO\"","import React from 'react';\r\nimport FilterForm from './filterForm';\r\nimport { connect } from \"react-redux\";\r\nimport { LISTAR_CIUDADES, FILTER_CITIES } from \"./store/actions/cityActions\";\r\nimport { Link } from 'react-router-dom';\r\nimport { FILTER_ITINERARIES } from \"./store/actions/itineraryActions\";\r\nimport ListGroup from 'react-bootstrap/ListGroup';\r\n\r\nclass FilterPlantas extends React.Component {\r\n\r\n\r\n\r\n    fetchCities = () => {\r\n        // this.setState({...this.state, isFetching: true })\r\n        fetch(\"https://riego-server.herokuapp.com/plantas/all\")\r\n            .then(response => response.json())\r\n            .then(result => this.props.listarCiudades(result))\r\n            .catch(e => console.log(e))\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.fetchCities()\r\n        console.log(this)\r\n    }\r\n\r\n    filterCities = (cityFilter) => {\r\n        this.props.filtrarCiudades(cityFilter);\r\n    }\r\n\r\n    handleClick = (name) => {\r\n        this.props.clickearCiudad(name)\r\n    }\r\n\r\n    render() {\r\n        console.log(this.props.logged)\r\n        return ( <\r\n            React.Fragment >\r\n            <\r\n            FilterForm cityFilter = { this.props.filteredCities }\r\n            match = { this.props.match }\r\n            onChange = { this.filterCities }\r\n            />  <\r\n            ListGroup > {\r\n                this.props.filteredCities.map((city) =>\r\n                    <\r\n                    ListGroup.Item key = { city._id }\r\n                    value = { city.planta } > <\r\n                    Link to = \"/IoTDatas\"\r\n                    onClick = {\r\n                        () => this.handleClick(city.planta)\r\n                    } > { city.planta } < /Link> </ListGroup.Item >\r\n                )\r\n            } < /ListGroup> < /\r\n            React.Fragment >\r\n        )\r\n    }\r\n}\r\n\r\nconst mapDispactchToProps = (dispatch) => {\r\n    return {\r\n        listarCiudades: (result) => dispatch({ type: LISTAR_CIUDADES, payload: result }),\r\n        filtrarCiudades: (cityFilter) => dispatch({ type: FILTER_CITIES, payload: cityFilter }),\r\n        clickearCiudad: (name) => dispatch({ type: FILTER_ITINERARIES, payload: name })\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        citiesList: state.cities.cities,\r\n        filteredCities: state.cities.filteredCities,\r\n        isFetching: state.isFetching,\r\n        url: state.itineraries.url,\r\n        logged: state.user.logged\r\n    }\r\n\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispactchToProps)(FilterPlantas)","export const FILTER_ITINERARIES = 'FILTER_ITINERARIES'\r\nexport const LISTAR_ITINERARIOS = 'LISTAR_ITINERARIOS'","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nfunction HomeLink(props) {\r\n    return <\r\n        Link to = \"/\" > < img src = \"./homeIcon.png\"\r\n    alt = \"Home\"\r\n    className = \"App-home m-5\" /\r\n        >\r\n        <\r\n        /Link>\r\n}\r\n\r\nexport default HomeLink;","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nfunction CreateNewPlanta(props) {\r\n    return <Link to = \"./NuevaPlanta\"\r\n    className = \"App-link\" > Cargar nueva planta < /Link>\r\n}\r\n\r\nexport default CreateNewPlanta;","import React from 'react';\r\nimport FilterPlantas from './FilterPlantas';\r\n//import VisibleCities from './VisibleCities';\r\nimport HomeLink from './homeLink';\r\nimport CreateNewPlanta from \"./botonNewPlanta\";\r\n\r\n\r\n\r\nclass Plantas extends React.Component {\r\n\r\n    render() {\r\n        return ( <\r\n            React.Fragment >\r\n\r\n\r\n\r\n            <\r\n            h4 className = \"pt-4\" > Selecciona una de tus plantas < /h4>\r\n\r\n            <\r\n            CreateNewPlanta / >\r\n\r\n            <\r\n            FilterPlantas / >\r\n            <\r\n            HomeLink / >\r\n            <\r\n            /React.Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Plantas","import React from 'react';\r\nimport { connect } from \"react-redux\";\r\nimport { POST_EMAIL, POST_PASSWORD, LOGIN } from \"./store/actions/usersAction\";\r\nimport axios from 'axios';\r\n//import { REGISTER_EMAIL } from \"./store/actions/registerAction\";\r\nimport { Redirect } from 'react-router-dom';\r\nimport HomeLink from './homeLink';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Row from 'react-bootstrap/Row';\r\n\r\nclass Login extends React.Component {\r\n\r\n    async handleSubmit(event) {\r\n        let res = await axios.post('http://localhost:5000/authentication/login', this.props.params);\r\n        console.log(res.data);\r\n        this.props.login(res.data);\r\n        alert(\"Login\", this.props.logged);\r\n        // this.storeToken(this.props.logged.token)\r\n        event.preventDefault();\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.props.ingresarEmail(\"\")\r\n        this.props.ingresarPassword(\"\")\r\n    }\r\n\r\n    /*  async storeToken(token) {\r\n        console.log(token);\r\n        axios.defaults.headers.common.Authorization = 'bearer ' + token;\r\n        localStorage.setItem('token', token);\r\n        const decoded = jwt_decode(token);\r\n        console.log(decoded);\r\n      } */\r\n\r\n    handleEmailChange(event) {\r\n        this.props.ingresarEmail(event.target.value);\r\n    }\r\n\r\n    handlePasswordChange(event) {\r\n        this.props.ingresarPassword(event.target.value);\r\n    }\r\n\r\n    render() {\r\n        let content;\r\n        console.log(this.props.logged);\r\n        if (this.props.logged.token) {\r\n            content = < Redirect to = '/' > < /Redirect>\r\n        } else {\r\n            content = <\r\n                React.Fragment >\r\n\r\n                <\r\n                h1 className = \"m-5\" > Login < /h1> <\r\n            form >\r\n                <\r\n                label >\r\n                Email:\r\n                <\r\n                input placeholder = \"Email\"\r\n            type = \"email\"\r\n            value = { this.props.email }\r\n            onChange = { this.handleEmailChange.bind(this) }\r\n            /> < /\r\n            label > <\r\n                label >\r\n                Password:\r\n                <\r\n                input placeholder = \"Password\"\r\n            type = \"password\"\r\n            value = { this.props.password }\r\n            onChange = { this.handlePasswordChange.bind(this) }\r\n            /> < /\r\n            label >\r\n\r\n\r\n                <\r\n                /form> <\r\n            Container >\r\n                <\r\n                Row >\r\n                <\r\n                Col md = {\r\n                    { span: 3, offset: 3 }\r\n                } > <\r\n                button className = \"m-5\"\r\n            onClick = { this.handleSubmit.bind(this) } > OK < /button> </Col > <\r\n                /Row> <\r\n            Row >\r\n                <\r\n                Col md = {\r\n                    { span: 3, offset: 3 }\r\n                } >\r\n                <\r\n                HomeLink / > < /Col> < /\r\n            Row > < /\r\n            Container > <\r\n                /React.Fragment>\r\n\r\n        }\r\n        return content;\r\n    }\r\n}\r\n\r\nconst mapDispactchToProps = (dispatch) => {\r\n    return {\r\n        ingresarEmail: (value) => dispatch({ type: POST_EMAIL, payload: value }),\r\n        ingresarPassword: (value) => dispatch({ type: POST_PASSWORD, payload: value }),\r\n        login: (value) => dispatch({ type: LOGIN, payload: value }),\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        params: state.user,\r\n        email: state.user.email,\r\n        password: state.user.password,\r\n        logged: state.user.logged\r\n    };\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispactchToProps)(Login)","export const POST_EMAIL = 'POST_EMAIL';\r\nexport const POST_PASSWORD = 'POST_PASSWORD';\r\nexport const POST_PICTURE = 'POST_PICTURE';\r\nexport const LOGIN = 'LOGIN';\r\n//export const LOG_EMAIL = 'LOG_EMAIL';\r\n//export const LOG_PASSWORD = 'LOG_EPASSWORD';\r\n","import React from 'react';\r\nimport { connect } from \"react-redux\";\r\nimport { POST_EMAIL, POST_PASSWORD, POST_PICTURE } from \"./store/actions/usersAction\";\r\nimport axios from 'axios';\r\nimport HomeLink from './homeLink';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Row from 'react-bootstrap/Row';\r\n\r\nclass CreateAccount extends React.Component {\r\n\r\n    async handleSubmit(event) {\r\n        let res = await axios.post('http://localhost:5000/users/', this.props.params);\r\n        console.log(res.data);\r\n        alert('An email was submitted: ' + this.props.email);\r\n        event.preventDefault();\r\n    }\r\n\r\n    handleEmailChange(event) {\r\n        this.props.crearEmail(event.target.value);\r\n    }\r\n\r\n    handlePasswordChange(event) {\r\n        this.props.crearPassword(event.target.value);\r\n    }\r\n\r\n    handlePictureChange(event) {\r\n        this.props.crearPicture(event.target.value);\r\n    }\r\n\r\n    render() {\r\n        return ( <\r\n            React.Fragment >\r\n            <\r\n            h1 className = \"my-5\" > Create Account < /h1> <\r\n            form onSubmit = { this.handleSubmit.bind(this) } >\r\n            <\r\n            Container >\r\n            <\r\n            Row >\r\n            <\r\n            Col md = {\r\n                { span: 3, offset: 3 }\r\n            } >\r\n            <\r\n            label >\r\n            Picture:\r\n            <\r\n            input placeholder = \"Picture\"\r\n            type = \"url\"\r\n            value = { this.props.picture }\r\n            onChange = { this.handlePictureChange.bind(this) }\r\n            /> < /\r\n            label > < /Col></Row >\r\n            <\r\n            Row >\r\n            <\r\n            Col md = {\r\n                { span: 3, offset: 3 }\r\n            } >\r\n            <\r\n            label >\r\n            Email:\r\n            <\r\n            input placeholder = \"Email\"\r\n            type = \"email\"\r\n            value = { this.props.email }\r\n            onChange = { this.handleEmailChange.bind(this) }\r\n            /> < /\r\n            label > < /Col></Row >\r\n            <\r\n            Row >\r\n            <\r\n            Col md = {\r\n                { span: 3, offset: 3 }\r\n            } >\r\n            <\r\n            label >\r\n            Password:\r\n            <\r\n            input placeholder = \"Password\"\r\n            type = \"password\"\r\n            value = { this.props.password }\r\n            onChange = { this.handlePasswordChange.bind(this) }\r\n            /> < /\r\n            label > < /Col></Row >\r\n\r\n            <\r\n            Row >\r\n            <\r\n            Col md = {\r\n                { span: 3, offset: 3 }\r\n            } >\r\n            <\r\n            input type = \"submit\"\r\n            value = \"Submit\" / > < /Col> </Row >\r\n            <\r\n            /Container> < /\r\n            form > <\r\n            HomeLink / >\r\n            <\r\n            /\r\n            React.Fragment >\r\n        );\r\n    }\r\n}\r\n\r\n\r\nconst mapDispactchToProps = (dispatch) => {\r\n    return {\r\n        crearEmail: (value) => dispatch({ type: POST_EMAIL, payload: value }),\r\n        crearPassword: (value) => dispatch({ type: POST_PASSWORD, payload: value }),\r\n        crearPicture: (value) => dispatch({ type: POST_PICTURE, payload: value }),\r\n\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        params: state.user,\r\n        email: state.user.email,\r\n        password: state.user.password,\r\n        picture: state.user.picture\r\n    };\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispactchToProps)(CreateAccount)","import React from 'react';\r\n\r\nclass Contador extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.state = { time: {}, seconds: 5 };\r\n        this.timer = 0;\r\n        this.startTimer = this.startTimer.bind(this);\r\n        this.countDown = this.countDown.bind(this);\r\n    }\r\n\r\n    secondsToTime(secs) {\r\n        let hours = Math.floor(secs / (60 * 60));\r\n\r\n        let divisor_for_minutes = secs % (60 * 60);\r\n        let minutes = Math.floor(divisor_for_minutes / 60);\r\n\r\n        let divisor_for_seconds = divisor_for_minutes % 60;\r\n        let seconds = Math.ceil(divisor_for_seconds);\r\n\r\n        let obj = {\r\n            \"h\": hours,\r\n            \"m\": minutes,\r\n            \"s\": seconds\r\n        };\r\n        return obj;\r\n    }\r\n\r\n    componentDidMount() {\r\n        let timeLeftVar = this.secondsToTime(this.state.seconds);\r\n        this.setState({ time: timeLeftVar });\r\n    }\r\n\r\n    startTimer() {\r\n        if (this.timer === 0) {\r\n            this.timer = setInterval(this.countDown, 1000);\r\n        }\r\n    }\r\n\r\n    countDown() {\r\n        // Remove one second, set state so a re-render happens.\r\n        let seconds = this.state.seconds - 1;\r\n        this.setState({\r\n            time: this.secondsToTime(seconds),\r\n            seconds: seconds,\r\n        });\r\n\r\n        // Check if we're at zero.\r\n        if (seconds === 0) {\r\n            clearInterval(this.timer);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return ( <\r\n            div >\r\n            <\r\n            button onClick = { this.startTimer } > Start < /button>\r\n            m: { this.state.time.m }\r\n            s: { this.state.time.s } <\r\n            /div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Contador","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nfunction CreateNewDatos(props) {\r\n    return <Link to = \"./CargarDatos\"\r\n    className = \"App-link\" > Actualizar datos < /Link>\r\n}\r\n\r\nexport default CreateNewDatos;","import React from 'react';\r\nimport { connect } from \"react-redux\";\r\nimport { FILTER_ITINERARIES, LISTAR_ITINERARIOS } from \"./store/actions/itineraryActions\";\r\nimport HomeLink from './homeLink';\r\nimport Contador from \"./contador\";\r\nimport CreateNewDatos from \"./botonNewDatos\";\r\n\r\n\r\nclass IoTDatas extends React.Component {\r\n\r\n    fetchItineraries = () => {\r\n        // this.setState({...this.state, isFetching: true })\r\n        fetch(this.props.url)\r\n            .then(response => response.json())\r\n            .then(result => this.props.listarItinerarios(result))\r\n            .catch(e => console.log(e))\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.fetchItineraries()\r\n        console.log(this.props.url)\r\n\r\n    }\r\n\r\n    render() {\r\n        return ( <\r\n            React.Fragment >\r\n            <\r\n            h1 > { this.props.planta } < /h1>\r\n\r\n            <\r\n            Contador / >\r\n\r\n            <\r\n            CreateNewDatos / >\r\n\r\n            <\r\n            ul > {\r\n                this.props.itineraries.map((itinerary) =>\r\n                    <\r\n                    li key = { itinerary._id }\r\n                    value = { itinerary.planta } > Temperatura: { itinerary.temperatura }°\r\n                    C, Humedad: { itinerary.humedad } % , Luz: { itinerary.luz } < /\r\n                    li > )\r\n            } < /ul> <\r\n            HomeLink / >\r\n            <\r\n            /\r\n            React.Fragment >\r\n        )\r\n    }\r\n\r\n}\r\n\r\nconst mapDispactchToProps = (dispatch) => {\r\n    return {\r\n        listarItinerarios: (result) => dispatch({ type: LISTAR_ITINERARIOS, payload: result }),\r\n        filtrarItinerarios: (cityName) => dispatch({ type: FILTER_ITINERARIES, payload: cityName })\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        itineraries: state.itineraries.itineraries,\r\n        url: state.itineraries.url,\r\n        isFetching: state.isFetching,\r\n        planta: state.itineraries.planta\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispactchToProps)(IoTDatas)","import React from 'react';\r\nimport { connect } from \"react-redux\";\r\nimport { POST_PLANTA, POST_TEMPERATURA, POST_HUMEDAD, POST_LUZ } from \"./store/actions/cityActions\";\r\nimport axios from 'axios';\r\nimport HomeLink from './homeLink';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Row from 'react-bootstrap/Row';\r\n\r\n\r\nclass CargarDatos extends React.Component {\r\n\r\n    async handleSubmit(event) {\r\n        let res = await axios.put(this.props.url, this.props.params);\r\n        console.log(res.data);\r\n        alert('A plant was submitted: ' + this.props.planta);\r\n        event.preventDefault();\r\n    }\r\n\r\n    handlePlantaChange(event) {\r\n        this.props.crearPlanta(event.target.value);\r\n    }\r\n\r\n    handleTemperaturaChange(event) {\r\n        this.props.crearTemperatura(event.target.value);\r\n    }\r\n\r\n    handleHumedadChange(event) {\r\n        this.props.crearHumedad(event.target.value);\r\n    }\r\n\r\n    handleLuzChange(event) {\r\n        this.props.crearLuz(event.target.value);\r\n    }\r\n\r\n    render() {\r\n        return ( <\r\n            React.Fragment >\r\n            <\r\n            h1 className = \"my-5\" > Actualizar datos { this.props.planta } < /h1> <\r\n            form onSubmit = { this.handleSubmit.bind(this) } >\r\n            <\r\n            Container >\r\n            <\r\n            Row >\r\n            <\r\n            Col md = {\r\n                { span: 3, offset: 3 }\r\n            } >\r\n            <\r\n            label >\r\n            Planta:\r\n            <\r\n            input placeholder = \"Planta\"\r\n            type = \"string\"\r\n            value = { this.props.planta }\r\n            onChange = { this.handlePlantaChange.bind(this) }\r\n            /> < /\r\n            label > < /Col></Row >\r\n            <\r\n            Row >\r\n            <\r\n            Col md = {\r\n                { span: 3, offset: 3 }\r\n            } >\r\n            <\r\n            label >\r\n            Temperatura:\r\n            <\r\n            input placeholder = \"Temperatura\"\r\n            type = \"number\"\r\n            value = { this.props.Temperatura }\r\n            onChange = { this.handleTemperaturaChange.bind(this) }\r\n            /> < /\r\n            label > < /Col></Row >\r\n            <\r\n            Row >\r\n            <\r\n            Col md = {\r\n                { span: 3, offset: 3 }\r\n            } >\r\n            <\r\n            label >\r\n            Humedad:\r\n            <\r\n            input placeholder = \"Humedad\"\r\n            type = \"number\"\r\n            value = { this.props.Humedad }\r\n            onChange = { this.handleHumedadChange.bind(this) }\r\n            /> < /\r\n            label > < /Col></Row >\r\n\r\n            <\r\n            Row >\r\n            <\r\n            Col md = {\r\n                { span: 3, offset: 3 }\r\n            } >\r\n            <\r\n            label >\r\n            Luz:\r\n            <\r\n            input placeholder = \"Luz\"\r\n            type = \"string\"\r\n            value = { this.props.Luz }\r\n            onChange = { this.handleLuzChange.bind(this) }\r\n            /> < /\r\n            label > < /Col></Row >\r\n\r\n            <\r\n            Row >\r\n            <\r\n            Col md = {\r\n                { span: 3, offset: 3 }\r\n            } >\r\n            <\r\n            input type = \"submit\"\r\n            value = \"Submit\" / > < /Col> </Row >\r\n            <\r\n            /Container> < /\r\n            form > <\r\n            HomeLink / >\r\n            <\r\n            /\r\n            React.Fragment >\r\n        );\r\n    }\r\n}\r\n\r\n\r\nconst mapDispactchToProps = (dispatch) => {\r\n    return {\r\n        crearPlanta: (value) => dispatch({ type: POST_PLANTA, payload: value }),\r\n        crearTemperatura: (value) => dispatch({ type: POST_TEMPERATURA, payload: value }),\r\n        crearHumedad: (value) => dispatch({ type: POST_HUMEDAD, payload: value }),\r\n        crearLuz: (value) => dispatch({ type: POST_LUZ, payload: value }),\r\n\r\n    }\r\n}\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        params: state.datos,\r\n        planta: state.itineraries.planta,\r\n        temperatura: state.datos.temperatura,\r\n        humedad: state.datos.humedad,\r\n        luz: state.datos.luz,\r\n        url: state.itineraries.url,\r\n        idPlanta: state.itineraries.itineraries.id_dueño\r\n    };\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispactchToProps)(CargarDatos)","import React from 'react';\r\nimport { connect } from \"react-redux\";\r\nimport { POST_PLANTA, POST_DUEÑO, POST_TEMPERATURA, POST_HUMEDAD, POST_LUZ } from \"./store/actions/cityActions\";\r\nimport axios from 'axios';\r\nimport HomeLink from './homeLink';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Row from 'react-bootstrap/Row';\r\n\r\n\r\nclass NuevaPlanta extends React.Component {\r\n\r\n    async handleSubmit(event) {\r\n        let res = await axios.post(\"https://riego-server.herokuapp.com/plantas/\", this.props.params);\r\n        console.log(res.data);\r\n        alert('A plant was submitted: ' + this.props.planta);\r\n        event.preventDefault();\r\n    }\r\n\r\n    handlePlantaChange(event) {\r\n        this.props.crearPlanta(event.target.value);\r\n    }\r\n\r\n    handleDueñoChange(event) {\r\n        this.props.crearDueño(event.target.value);\r\n    }\r\n\r\n    handleTemperaturaChange(event) {\r\n        this.props.crearTemperatura(event.target.value);\r\n    }\r\n\r\n    handleHumedadChange(event) {\r\n        this.props.crearHumedad(event.target.value);\r\n    }\r\n\r\n    handleLuzChange(event) {\r\n        this.props.crearLuz(event.target.value);\r\n    }\r\n\r\n    render() {\r\n        return ( <\r\n            React.Fragment >\r\n            <\r\n            h1 className = \"my-5\" > Cargar nueva planta { this.props.planta } < /h1> <\r\n            form onSubmit = { this.handleSubmit.bind(this) } >\r\n            <\r\n            Container >\r\n            <\r\n            Row >\r\n            <\r\n            Col md = {\r\n                { span: 3, offset: 3 }\r\n            } >\r\n            <\r\n            label >\r\n            Planta:\r\n            <\r\n            input placeholder = \"Planta\"\r\n            type = \"string\"\r\n            value = { this.props.planta }\r\n            onChange = { this.handlePlantaChange.bind(this) }\r\n            /> < /\r\n            label > < /Col></Row >\r\n            <\r\n            Row >\r\n            <\r\n            Col md = {\r\n                { span: 3, offset: 3 }\r\n            } >\r\n            <\r\n            label >\r\n            Dueño:\r\n            <\r\n            input placeholder = \"Dueño\"\r\n            type = \"string\"\r\n            value = { this.props.dueño }\r\n            onChange = { this.handleDueñoChange.bind(this) }\r\n            /> < /\r\n            label > < /Col></Row >\r\n\r\n            <\r\n            Row >\r\n            <\r\n            Col md = {\r\n                { span: 3, offset: 3 }\r\n            } >\r\n            <\r\n            label >\r\n            Temperatura:\r\n            <\r\n            input placeholder = \"Temperatura\"\r\n            type = \"number\"\r\n            value = { this.props.Temperatura }\r\n            onChange = { this.handleTemperaturaChange.bind(this) }\r\n            /> < /\r\n            label > < /Col></Row >\r\n            <\r\n            Row >\r\n            <\r\n            Col md = {\r\n                { span: 3, offset: 3 }\r\n            } >\r\n            <\r\n            label >\r\n            Humedad:\r\n            <\r\n            input placeholder = \"Humedad\"\r\n            type = \"number\"\r\n            value = { this.props.Humedad }\r\n            onChange = { this.handleHumedadChange.bind(this) }\r\n            /> < /\r\n            label > < /Col></Row >\r\n\r\n            <\r\n            Row >\r\n            <\r\n            Col md = {\r\n                { span: 3, offset: 3 }\r\n            } >\r\n            <\r\n            label >\r\n            Luz:\r\n            <\r\n            input placeholder = \"Luz\"\r\n            type = \"string\"\r\n            value = { this.props.Luz }\r\n            onChange = { this.handleLuzChange.bind(this) }\r\n            /> < /\r\n            label > < /Col></Row >\r\n\r\n            <\r\n            Row >\r\n            <\r\n            Col md = {\r\n                { span: 3, offset: 3 }\r\n            } >\r\n            <\r\n            input type = \"submit\"\r\n            value = \"Submit\" / > < /Col> </Row >\r\n            <\r\n            /Container> < /\r\n            form > <\r\n            HomeLink / >\r\n            <\r\n            /\r\n            React.Fragment >\r\n        );\r\n    }\r\n}\r\n\r\n\r\nconst mapDispactchToProps = (dispatch) => {\r\n    return {\r\n        crearPlanta: (value) => dispatch({ type: POST_PLANTA, payload: value }),\r\n        crearDueño: (value) => dispatch({ type: POST_DUEÑO, payload: value }),\r\n        crearTemperatura: (value) => dispatch({ type: POST_TEMPERATURA, payload: value }),\r\n        crearHumedad: (value) => dispatch({ type: POST_HUMEDAD, payload: value }),\r\n        crearLuz: (value) => dispatch({ type: POST_LUZ, payload: value }),\r\n    }\r\n}\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        params: state.planta,\r\n        planta: state.planta.planta,\r\n        dueño: state.planta.dueño,\r\n        temperatura: state.planta.temperatura,\r\n        humedad: state.planta.humedad,\r\n        luz: state.planta.luz,\r\n    };\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispactchToProps)(NuevaPlanta)","import React from 'react';\r\nimport HomeLink from \"./homeLink\";\r\n\r\nconst Notfound = () =>\r\n    <\r\n    div >\r\n\r\n    <\r\n    h1 > No se encuentra la página < /h1>\r\n\r\n<\r\nHomeLink / >\r\n\r\n    <\r\n    /div>\r\n\r\nexport default Notfound","import './App.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport React, { Component } from 'react';\r\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\r\nimport Landing from './Landing';\r\nimport Plantas from './Plantas';\r\nimport Login from './Login';\r\nimport CreateAccount from './CreateAccount';\r\nimport IoTDatas from './IoTDatas';\r\nimport CargarDatos from \"./CargarDatos\";\r\nimport NuevaPlanta from \"./NuevaPlanta\";\r\nimport Notfound from './notfound';\r\n\r\nexport default class App extends Component {\r\n    render() {\r\n        return ( < BrowserRouter basename = '/' >\r\n            <\r\n            div className = \"App\" >\r\n            <\r\n            Switch >\r\n            <\r\n            Route exact path = '/'\r\n            component = { Landing }\r\n            /> <\r\n            Route path = '/Plantas'\r\n            component = { Plantas }\r\n            />  <\r\n            Route path = '/Login'\r\n            component = { Login }\r\n            />  <\r\n            Route path = '/CreateAccount'\r\n            component = { CreateAccount }\r\n            />  <\r\n            Route path = '/IoTDatas'\r\n            component = { IoTDatas }\r\n            />  <\r\n            Route path = '/CargarDatos'\r\n            component = { CargarDatos }\r\n            /> \r\n\r\n            <\r\n            Route path = '/NuevaPlanta'\r\n            component = { NuevaPlanta }\r\n            /> <\r\n            Route component = { Notfound }\r\n            /> < /\r\n            Switch > <\r\n            /\r\n            div >\r\n            <\r\n            /\r\n            BrowserRouter >\r\n        );\r\n    }\r\n}","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","const initialState = {\r\n    cities: [],\r\n    filteredCities: []\r\n}\r\n\r\nconst FilterCitiesReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case 'LISTAR_CIUDADES':\r\n            return {...state, cities: action.payload, filteredCities: action.payload };\r\n        case 'FILTER_CITIES':\r\n            return {...state,\r\n                filteredCities: state.cities.filter((city) => {\r\n                    let cityName = city.planta.toLowerCase()\r\n                    return cityName.indexOf(\r\n                        action.payload.toLowerCase()) === 0\r\n                })\r\n\r\n            };\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default FilterCitiesReducer","const initialState = {\r\n    cityFilter: \"\"\r\n}\r\n\r\nconst FilterFormReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case 'HANDLE_CHANGE':\r\n            return {...state, cityFilter: action.payload }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default FilterFormReducer","const initialState = {\r\n    itineraries: [],\r\n    url: [],\r\n    planta: \"\"\r\n}\r\n\r\nconst ItinerariesReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case 'LISTAR_ITINERARIOS':\r\n            return {...state, itineraries: action.payload };\r\n        case 'FILTER_ITINERARIES':\r\n            return {...state, url: \"https://riego-server.herokuapp.com/plantas/\" + action.payload, planta: action.payload };\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default ItinerariesReducer","const initialState = {\r\n    email: '',\r\n    password: '',\r\n    logged: {}\r\n};\r\n\r\nconst usersReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case 'POST_EMAIL':\r\n            return {\r\n                ...state,\r\n                email: action.payload\r\n            }\r\n        case 'POST_PASSWORD':\r\n            return {\r\n                ...state,\r\n                password: action.payload\r\n            }\r\n\r\n        case 'LOGIN':\r\n            return {\r\n                ...state,\r\n                logged: action.payload\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default usersReducer","const initialState = {\r\n    token: '',\r\n};\r\n\r\nconst registerReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case 'REGISTER_EMAIL':\r\n            return {\r\n                ...state,\r\n                token: action.payload\r\n            }  \r\n        default:\r\n            return state;\r\n    }\r\n};\r\nexport default registerReducer\r\n","const initialState = {\r\n    planta: '',\r\n    temperatura: 0,\r\n    humedad: 0,\r\n    luz: \"\",\r\n};\r\n\r\nconst datosReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case 'POST_PLANTA':\r\n            return {\r\n                ...state,\r\n                planta: action.payload\r\n            }\r\n        case 'POST_TEMPERATURA':\r\n            return {\r\n                ...state,\r\n                temperatura: action.payload\r\n            }\r\n\r\n        case 'POST_HUMEDAD':\r\n            return {\r\n                ...state,\r\n                humedad: action.payload\r\n            }\r\n\r\n        case 'POST_LUZ':\r\n            return {\r\n                ...state,\r\n                luz: action.payload\r\n            }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default datosReducer","const initialState = {\r\n    planta: '',\r\n    dueño: \"\",\r\n    id_dueño: \"\",\r\n};\r\n\r\nconst plantaReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case 'POST_PLANTA':\r\n            return {\r\n                ...state,\r\n                planta: action.payload\r\n            }\r\n        case 'POST_DUEÑO':\r\n            return {\r\n                ...state,\r\n                dueño: action.payload\r\n            }\r\n        case 'POST_TEMPERATURA':\r\n            return {\r\n                ...state,\r\n                temperatura: action.payload\r\n            }\r\n\r\n        case 'POST_HUMEDAD':\r\n            return {\r\n                ...state,\r\n                humedad: action.payload\r\n            }\r\n\r\n        case 'POST_LUZ':\r\n            return {\r\n                ...state,\r\n                luz: action.payload\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default plantaReducer","import { combineReducers } from \"redux\";\r\nimport FilterCitiesReducer from \"./citiesReducer\";\r\nimport FilterFormReducer from \"./FilterFormReducer\";\r\nimport ItinerariesReducer from \"./itineraryReducer\";\r\nimport usersReducer from \"./usersReducer\";\r\nimport registerReducer from \"./registerReducer\";\r\nimport datosReducer from \"./datosReducer\";\r\nimport plantaReducer from \"./plantaReducer\";\r\n\r\nconst rootReducer = combineReducers({ cities: FilterCitiesReducer, cityFilter: FilterFormReducer, itineraries: ItinerariesReducer, user: usersReducer, token: registerReducer, datos: datosReducer, planta: plantaReducer });\r\n\r\nexport default rootReducer;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { composeWithDevTools } from \"redux-devtools-extension\";\r\nimport { createStore, applyMiddleware } from \"redux\";\r\nimport { Provider } from \"react-redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport rootReducer from \"./store/reducers/rootReducer\";\r\n\r\nconst store = createStore(\r\n    rootReducer,\r\n    composeWithDevTools(applyMiddleware(thunk))\r\n);\r\nReactDOM.render( <\r\n    Provider store = { store } >\r\n    <\r\n    App / >\r\n    <\r\n    /Provider>,\r\n    document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();"],"sourceRoot":""}